pbproxy [-l port] -k keyfile destination port

  -l  Reverse-proxy mode: listen for inbound connections on <port> and relay
      them to <destination>:<port>

  -k  Use the symmetric key contained in <keyfile> (as a hexadecimal string)

Implementation details -

1. Parsing command line arguments using getopt. 
2. IV is the first thing sent by client to server.
3. Client reads from STDIN, encrypts the data using aes in ctr mode and sends it to pbproxy server. 
4. Client reads encryped responses on socket connection with pbproxy server and prints on stdout after decrypting. 
5. Using fcntl to set sockets to non blocking for IO multiplexing.
6. Pbproxy server accepts client connection and connects to ssh server.
7. Pbproxy server listens at client socket, decrypts received data and forwards it to ssh socket.
8. Pbproxy server receives plaintext data at ssh socket, encrypts it and sends it to client.
9. Pbproxy listens for new client connections once client disconnects.

Machine details -

cat /etc/*-release

DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=16.04
DISTRIB_CODENAME=xenial
DISTRIB_DESCRIPTION="Ubuntu 16.04.3 LTS"
NAME="Ubuntu"
VERSION="16.04.3 LTS (Xenial Xerus)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 16.04.3 LTS"
VERSION_ID="16.04"
HOME_URL="http://www.ubuntu.com/"
SUPPORT_URL="http://help.ubuntu.com/"
BUG_REPORT_URL="http://bugs.launchpad.net/ubuntu/"
VERSION_CODENAME=xenial
UBUNTU_CODENAME=xenial

References -

1. socket programming in C - http://www.cs.rpi.edu/~moorthy/Courses/os98/Pgms/socket.html
2. aes ctr encryption - http://www.gurutechnologies.net/blog/aes-ctr-encryption-in-c/
